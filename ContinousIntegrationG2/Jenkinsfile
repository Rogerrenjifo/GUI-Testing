pipeline {
  agent any
  environment {
    PYTHONPATH = "${WORKSPACE}\\"
    PASSWORD=credentials('PASSWORD')
    USER=credentials('USER')
    BROWSER="chrome"
    DEVICE="pc"
    DRIVER_PATH=".\\"
    IMPLICIT_TIMEOUT="70"
    CI_EXECUTION="False"
    virtualenvDir = "${WORKSPACE}\\venv"
    SMOKE_TEST="false"
    REGRESSION="true"
    COMPATIBILITY="false"
  }
  stages{
    stage('Install Dependencies') {
      steps {
        dir("${WORKSPACE}"){
          script {
            bat "python -m venv ${virtualenvDir}"
            bat ".\\venv\\Scripts\\activate"
            bat "${virtualenvDir}\\Scripts\\pip install -r ${WORKSPACE}\\requeriments.txt"
          }
        }
      }
    }
    // stage('Smoke Test'){
    //   when {
    //     expression { SMOKE_TEST == "true" }
    //   }
    //   steps{
    //     dir("${WORKSPACE}"){
    //       catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
    //         bat '.\\venv\\Scripts\\robot  --outputdir .\\Blueprint\\Reports\\Smoke -i PROJECTANDSMOKE .\\Blueprint\\TestCases'
    //       }
    //     }
    //   }
    //   post {
    //     always {
    //       archiveArtifacts artifacts: 'Blueprint/Reports/Smoke/log.html', fingerprint: true
    //       archiveArtifacts artifacts: 'Blueprint/Reports/Smoke/report.html', fingerprint: true
    //       archiveArtifacts artifacts: 'Blueprint/Reports/Smoke/output.xml', fingerprint: true
    //     }
    //   }
    // }
    stage('Regression Test'){
      when {
        expression { REGRESSION == "true" }
      }
      steps{
        dir("${WORKSPACE}"){
          catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
            bat '.\\venv\\Scripts\\robot  --outputdir .\\Blueprint\\Reports\\Regretion -i PROJECT .\\Blueprint\\TestCases'
          }
        }
      }
      post {
        always {
          archiveArtifacts artifacts: 'Blueprint/Reports/Regretion/log.html', fingerprint: true
          archiveArtifacts artifacts: 'Blueprint/Reports/Regretion/report.html', fingerprint: true
          archiveArtifacts artifacts: 'Blueprint/Reports/Regretion/output.xml', fingerprint: true
        }
      }
    }
    // stage('Compatibility Test'){
    //   when {
    //     expression { COMPATIBILITY == "true" }
    //   }
    //   environment {
    //     DEVICE='galaxy s20 ultra'
    //     IMPLICIT_TIMEOUT="30"
    //   }
    //   steps{
    //     dir("${WORKSPACE}"){
    //       catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
    //         bat '.\\venv\\Scripts\\robot  --outputdir .\\Blueprint\\Reports\\Compatibility -i PROJECT .\\Blueprint\\TestCases'
    //       }
    //     }
    //   }
    //   post {
    //     always {
    //       archiveArtifacts artifacts: 'Blueprint/Reports/Compatibility/log.html', fingerprint: true
    //       archiveArtifacts artifacts: 'Blueprint/Reports/Compatibility/report.html', fingerprint: true
    //       archiveArtifacts artifacts: 'Blueprint/Reports/Compatibility/output.xml', fingerprint: true
    //     }
    //   }
    // }
  }
  post {
    always {
      script {
        bat "rmdir /s /q ${virtualenvDir}"
      }
    }
  }
}
